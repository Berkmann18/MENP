#!/usr/bin/env node
/* eslint-env es6, node */

const fs = require('fs'), https = require('https'), tlsOptions = {
  key  : fs.readFileSync('server.key'),
  cert : fs.readFileSync('server.crt')
};

let normalizePort = (val) => {
  let port = parseInt(val, 10);

  if (isNaN(port)) return val; //Named pipe

  if (port >= 0) return port; //Port number
};

let app = require('../app'), eip = require('externalip');
let port = normalizePort(process.env.PORT || 3e3);

//let server = app.listen(port, () => {
let server = https.createServer(tlsOptions, app).listen(port, () => {
  let ipAddress = server.address();
  // :: is the reduced form of the unspecified IPv6 address 0:0:0:0:0:0:0:0
  let location = typeof ipAddress === 'string'
    ? `pipe ${ipAddress}`
    : `http(s)://${ipAddress.address === '::' ? 'localhost' : ipAddress.address}:${ipAddress.port}`;

  console.log('App listening at', location);
});

server.on('error', (error) => {
  if (error.syscall !== 'listen') throw error;
  let bind = (typeof port === 'string') ? `Pipe ${port}` : `Port ${port}`;
  //Handle specific listen errors with friendly messages
  switch (error.code) {
  case 'EACCES':
    console.error(`${bind} requires elevated privileges`);
    process.exit(1);
    break;
  case 'EADDRINUSE':
    console.error(`${bind} is already in use`);
    process.exit(1);
    break;
  case 'ENOENT':
    console.log(`Inexistent entry requested at ${bind}`);
    break;
  default:
    throw error;
  }
});

eip((err, ip) => {
  if (err) console.log('Public IP error:', err);
  console.log('Public IP:', ip);
});